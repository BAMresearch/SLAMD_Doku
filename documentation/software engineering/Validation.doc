Date: Thu, 1 Sep 2022 10:45:10 +0200 (CEST)
Message-ID: <1080065297.12964.1662021910870@296d5edede7b>
Subject: Exported From Confluence
MIME-Version: 1.0
Content-Type: multipart/related; 
	boundary="----=_Part_12963_181013733.1662021910870"

------=_Part_12963_181013733.1662021910870
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable
Content-Location: file:///C:/exported.html

<html xmlns:o=3D'urn:schemas-microsoft-com:office:office'
      xmlns:w=3D'urn:schemas-microsoft-com:office:word'
      xmlns:v=3D'urn:schemas-microsoft-com:vml'
      xmlns=3D'urn:w3-org-ns:HTML'>
<head>
    <meta http-equiv=3D"Content-Type" content=3D"text/html; charset=3Dutf-8=
">
    <title>Validation</title>
    <!--[if gte mso 9]>
    <xml>
        <o:OfficeDocumentSettings>
            <o:TargetScreenSize>1024x640</o:TargetScreenSize>
            <o:PixelsPerInch>72</o:PixelsPerInch>
            <o:AllowPNG/>
        </o:OfficeDocumentSettings>
        <w:WordDocument>
            <w:View>Print</w:View>
            <w:Zoom>90</w:Zoom>
            <w:DoNotOptimizeForBrowser/>
        </w:WordDocument>
    </xml>
    <![endif]-->
    <style>
                <!--
        @page Section1 {
            size: 8.5in 11.0in;
            margin: 1.0in;
            mso-header-margin: .5in;
            mso-footer-margin: .5in;
            mso-paper-source: 0;
        }

        table {
            border: solid 1px;
            border-collapse: collapse;
        }

        table td, table th {
            border: solid 1px;
            padding: 5px;
        }

        td {
            page-break-inside: avoid;
        }

        tr {
            page-break-after: avoid;
        }

        div.Section1 {
            page: Section1;
        }

        /* Confluence print stylesheet. Common to all themes for print medi=
a */
/* Full of !important until we improve batching for print CSS */

@media print {
    #main {
        padding-bottom: 1em !important; /* The default padding of 6em is to=
o much for printouts */
    }

    body {
        font-family: Arial, Helvetica, FreeSans, sans-serif;
        font-size: 10pt;
        line-height: 1.2;
    }

    body, #full-height-container, #main, #page, #content, .has-personal-sid=
ebar #content {
        background: #fff !important;
        color: #000 !important;
        border: 0 !important;
        width: 100% !important;
        height: auto !important;
        min-height: auto !important;
        margin: 0 !important;
        padding: 0 !important;
        display: block !important;
    }

    a, a:link, a:visited, a:focus, a:hover, a:active {
        color: #000;
    }

    #content h1,
    #content h2,
    #content h3,
    #content h4,
    #content h5,
    #content h6 {
        font-family: Arial, Helvetica, FreeSans, sans-serif;
        page-break-after: avoid;
    }

    pre {
        font-family: Monaco, "Courier New", monospace;
    }

    #header,
    .aui-header-inner,
    #navigation,
    #sidebar,
    .sidebar,
    #personal-info-sidebar,
    .ia-fixed-sidebar,
    .page-actions,
    .navmenu,
    .ajs-menu-bar,
    .noprint,
    .inline-control-link,
    .inline-control-link a,
    a.show-labels-editor,
    .global-comment-actions,
    .comment-actions,
    .quick-comment-container,
    #addcomment {
        display: none !important;
    }

    /* CONF-28544 cannot print multiple pages in IE */
    #splitter-content {
        position: relative !important;
    }

    .comment .date::before {
        content: none !important; /* remove middot for print view */
    }

    h1.pagetitle img {
        height: auto;
        width: auto;
    }

    .print-only {
        display: block;
    }

    #footer {
        position: relative !important; /* CONF-17506 Place the footer at en=
d of the content */
        margin: 0;
        padding: 0;
        background: none;
        clear: both;
    }

    #poweredby {
        border-top: none;
        background: none;
    }

    #poweredby li.print-only {
        display: list-item;
        font-style: italic;
    }

    #poweredby li.noprint {
        display: none;
    }

    /* no width controls in print */
    .wiki-content .table-wrap,
    .wiki-content p,
    .panel .codeContent,
    .panel .codeContent pre,
    .image-wrap {
        overflow: visible !important;
    }

    /* TODO - should this work? */
    #children-section,
    #comments-section .comment,
    #comments-section .comment .comment-body,
    #comments-section .comment .comment-content,
    #comments-section .comment p {
        page-break-inside: avoid;
    }

    #page-children a {
        text-decoration: none;
    }

    /**
     hide twixies

     the specificity here is a hack because print styles
     are getting loaded before the base styles. */
    #comments-section.pageSection .section-header,
    #comments-section.pageSection .section-title,
    #children-section.pageSection .section-header,
    #children-section.pageSection .section-title,
    .children-show-hide {
        padding-left: 0;
        margin-left: 0;
    }

    .children-show-hide.icon {
        display: none;
    }

    /* personal sidebar */
    .has-personal-sidebar #content {
        margin-right: 0px;
    }

    .has-personal-sidebar #content .pageSection {
        margin-right: 0px;
    }

    .no-print, .no-print * {
        display: none !important;
    }
}
-->
    </style>
</head>
<body>
    <h1>Validation</h1>
    <div class=3D"Section1">
        <p>This page describes how we validate user input within slamd. Val=
idating the input of a user can be done in the frontend to improve the usab=
ility of the app. However, it is even more crucial to validate in the backe=
nd as the request could e.g. be intercepted by a proxy and changed.</p>
<h3 id=3D"Validation-CSRF">CSRF</h3>
<p>In order to make sure that we can trust the origin of the request WTForm=
s provides a functionality which automatically creates a csrf token for the=
 user. For that purpose we specify a secret key which is then internally us=
ed by WTForms.<br>In order to identify the origin of the request we have to=
 make sure that the token is passed when calling the backend. In case we po=
st from a standard html form using a WTForm submit button (e.g. when savin =
base materials), we can use the hidden tag property<br>generated by WTForms=
. It automatically creates a hidden input field with the value of the token=
 and is thus passed on submission. In order to include it in the code we mu=
st specify the csrf_token property in our form, e.g. as in the following co=
de example:</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">{{ form=
.hidden_tag() }}
{% from 'errors.html' import with_errors -%}
{% from 'render_material_type_form.j2' import render_material_type_form -%}

&lt;h3&gt;New material&lt;/h3&gt;
&lt;form class=3D"row g-3" action=3D"" method=3D"post" novalidate&gt;
    {{ form.csrf_token }}</pre>=20
</div>
</div>
<p>Note that setting novalidate in the form tag implies that standard brows=
er validations are disabled and instead WTForms mechanisms take over. The t=
oken is now passed to the backend. In case we would not include the csrf_to=
ken here, the request would automatically be rejected by Flask+WTForms.</p>
<p>The second possibility of sending data to the backend is via using javas=
cript's fetch api. In this case, we can read the value of the token using v=
anilla javascript and pass it to the requests header, e.g.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">const t=
oken =3D document.getElementById("csrf_token").value
    const response =3D await fetch(url, {
        method: "POST",
        headers: {
            'X-CSRF-TOKEN': token
        },
        body: JSON.stringify(body)
    });</pre>=20
</div>
</div>
<h3 class=3D"auto-cursor-target" id=3D"Validation-InputData">Input Data</h3=
>
<p class=3D"auto-cursor-target">Input from the user can be validated a) in =
the frontend and b) in the backend. For a) we use some vanilla javascript w=
hich allows to restrict or fix input data. We make heavy use of this when s=
pecifying a blending configuration (blended_materials.js and blended_materi=
als_utils.js).<br>For b) we can use two mechanism depending on the usecase.=
 The first is using validators of WTForms. These are included within the de=
finition of the Form as python code, e.g.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">materia=
l_name =3D StringField(
        label=3D'Name',
        validators=3D[validators.DataRequired(
            message=3D'Material name cannot be empty'), name_is_unique]
    )</pre>=20
</div>
</div>
<p class=3D"auto-cursor-target">Here DataRequired comes from WTForms and na=
me_is_unique is a custom validator defined by us in validation.py. A failin=
g validation (form.validate() is used, were form is a corresponding WTForm =
object) leads to showing an error message on the corresponding field. The s=
econd mechanism is not to use WTForms but directly validate the input data.=
 Depending on the usecase, this might be simpler and more efficient. E.g. i=
n blended materials we have to make subsequent requests to the backend to p=
roperly create the complete form. We use various sub-forms for that purpose=
. The data we pass to the backend might not be directly in a format which i=
s appropriate to the corresponding form as working with subforms we rely he=
avily on custom javascript. In this case it is more complicated to first ma=
p the data to the sub-form to be validated. Thus, we diectly validate on th=
e information contained in the request body and redirect in case of an erro=
r to the corresponding html error page.</p>
    </div>
</body>
</html>
------=_Part_12963_181013733.1662021910870--
